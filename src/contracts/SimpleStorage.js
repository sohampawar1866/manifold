/**
 * Example Smart Contract for Kadena Multi-Chain Template
 * 
 * This is a simple contract that developers can use as a starting point.
 * It will be deployed to all 5 Kadena chains simultaneously to showcase
 * the multi-chain capabilities.
 */

export const SimpleStorageContract = {
  // Contract source code (Solidity)
  source: `
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract SimpleStorage {
    uint256 private storedNumber;
    string private storedMessage;
    address public owner;
    
    event NumberUpdated(uint256 newNumber, address updatedBy);
    event MessageUpdated(string newMessage, address updatedBy);
    
    constructor(uint256 _initialNumber, string memory _initialMessage) {
        storedNumber = _initialNumber;
        storedMessage = _initialMessage;
        owner = msg.sender;
    }
    
    function setNumber(uint256 _number) public {
        storedNumber = _number;
        emit NumberUpdated(_number, msg.sender);
    }
    
    function getNumber() public view returns (uint256) {
        return storedNumber;
    }
    
    function setMessage(string memory _message) public {
        storedMessage = _message;
        emit MessageUpdated(_message, msg.sender);
    }
    
    function getMessage() public view returns (string memory) {
        return storedMessage;
    }
    
    function getOwner() public view returns (address) {
        return owner;
    }
}`,

  // ABI (Application Binary Interface)
  abi: [
    {
      "inputs": [
        {"internalType": "uint256", "name": "_initialNumber", "type": "uint256"},
        {"internalType": "string", "name": "_initialMessage", "type": "string"}
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {"indexed": false, "internalType": "string", "name": "newMessage", "type": "string"},
        {"indexed": false, "internalType": "address", "name": "updatedBy", "type": "address"}
      ],
      "name": "MessageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {"indexed": false, "internalType": "uint256", "name": "newNumber", "type": "uint256"},
        {"indexed": false, "internalType": "address", "name": "updatedBy", "type": "address"}
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getMessage",
      "outputs": [{"internalType": "string", "name": "", "type": "string"}],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumber",
      "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [{"internalType": "address", "name": "", "type": "address"}],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [{"internalType": "address", "name": "", "type": "address"}],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{"internalType": "string", "name": "_message", "type": "string"}],
      "name": "setMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{"internalType": "uint256", "name": "_number", "type": "uint256"}],
      "name": "setNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],

  // Bytecode (compiled contract)
  bytecode: "0x608060405234801561001057600080fd5b50604051610520380380610520833981810160405281019061003291906100d4565b8160008190555080600190805190602001906100459291906100a0565b503360026000600160405186604051602001610068969594939291906002050901565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610147565b8280546100ac90610113565b90600052602060002090601f0160209004810192826100ce5760008555610115565b82601f106100e757805160ff1916838001178555610115565b82800160010185558215610115579182015b828111156101145782518255916020019190600101906100f9565b5b5090506101229190610126565b5090565b5b8082111561013f576000816000905550600101610127565b5090565b610145565b6000815190506101546101436103c9565b604d516500006103df565b600080fd5b600080fd5b6000819050919050565b610171816103c9565b811461017c57600080fd5b50565b60008151905061018e81610168565b92915050565b600080fd5b600080fd5b600080fd5b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101f05780820151818401526020810190506101d5565b838111156101ff576000848401525b50505050565b6000601f19601f8301169050919050565b6000610221826101b6565b61022b81856101c1565b935061023b8185602086016101d2565b61024481610205565b840191505092915050565b600060408201905061026460008301856102a6565b81810360208301526102768184610216565b90509392505050565b6102888161015c565b811461029357600080fd5b50565b6000815190506102a58161027f565b92915050565b60006102b68261015c565b9050919050565b6102c6816102ab565b82525050565b60006040820190506102e160008301856102bd565b6102ee6020830184610296565b9392505050565b6103098161015c565b811461031457600080fd5b50565b600081519050610326816102f5565b92915050565b6000806040838503121561034357610342610194565b5b60006103518582860161017f565b925050602083015167ffffffffffffffff81111561037257610371610199565b5b61037e85828601610317565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103cf57607f821691505b6020821081036103e2576103e1610388565b5b50919050565b6103c9806103f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e1a7d4d146100675780634e70b1dc1461008557806367e404ce146100a35780638da5cb5b146100c1578063a87d942c146100df578063e21f37ce146100fd575b600080fd5b61008360048036038101906100809190610123565b61011b565b005b61008d610164565b60405161009a91906101a2565b60405180910390f35b6100ab61016e565b6040516100b891906101f3565b60405180910390f35b6100c9610194565b6040516100d691906101f3565b60405180910390f35b6100e76101ba565b6040516100f491906101a2565b60405180910390f35b6101056101c4565b60405161011291906102a6565b60405180910390f35b806000819055507f331c1bd6ef13bbfd28f3e70b4b66acf3b49c4c39ce6b62eb38b67c5b69d6e2b88133604051610159929190610263565b60405180910390a150565b6000600054905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600054905090565b600180546101d190610316565b80601f01602080910402602001604051908101604052809291908181526020018280546101fd90610316565b801561024a5780601f1061021f5761010080835404028352916020019161024a565b820191906000526020600020905b81548152906001019060200180831161022d57829003601f168201915b505050505081565b6000819050919050565b61026581610252565b82525050565b6000604082019050610280600083018561025c565b61028d60208301846102eb565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102ce5780820151818401526020810190506102b3565b838111156102dd576000848401525b50505050565b6000601f19601f8301169050919050565b600061030082610294565b61030a818561029f565b935061031a8185602086016102b0565b610323816102e3565b840191505092915050565b6000602082019050818103600083015261034881846102f4565b905092915050565b600080fd5b61035e81610252565b811461036957600080fd5b50565b60008135905061037b81610355565b92915050565b60006020828403121561039757610396610350565b5b60006103a58482850161036c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103f557607f821691505b602082108103610408576104076103ae565b5b5091905056fea2646970667358221220c4c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c564736f6c63430008110033"
};

/**
 * Helper function to get default constructor arguments
 */
export function getDefaultConstructorArgs() {
  return [
    42, // Initial number
    "Hello Kadena Multi-Chain!" // Initial message
  ];
}